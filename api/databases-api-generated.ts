/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DatabasesCreateDocumentRequest } from '../models';
// @ts-ignore
import { DatabasesUpdateDocumentByIdRequest } from '../models';
// @ts-ignore
import { Document } from '../models';
// @ts-ignore
import { DocumentList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DatabasesApi - axios parameter creator
 * @export
 */
export const DatabasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.
         * @param {DatabasesCreateDocumentRequest} [databasesCreateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument: async (databaseId: string, collectionId: string, databasesCreateDocumentRequest?: DatabasesCreateDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('createDocument', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('createDocument', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesCreateDocumentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesCreateDocumentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} documentId Document ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentById: async (databaseId: string, collectionId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {string} documentId Document ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentById: async (databaseId: string, collectionId: string, documentId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDocuments: async (databaseId: string, collectionId: string, queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('listUserDocuments', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('listUserDocuments', 'collectionId', collectionId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {string} databaseId Database ID.
         * @param {string} collectionId Collection ID.
         * @param {string} documentId Document ID.
         * @param {DatabasesUpdateDocumentByIdRequest} [databasesUpdateDocumentByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentById: async (databaseId: string, collectionId: string, documentId: string, databasesUpdateDocumentByIdRequest?: DatabasesUpdateDocumentByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateDocumentById', 'databaseId', databaseId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateDocumentById', 'collectionId', collectionId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('updateDocumentById', 'documentId', documentId)
            const localVarPath = `/databases/{databaseId}/collections/{collectionId}/documents/{documentId}`
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-databaseId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId !== undefined ? documentId : `-documentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databasesUpdateDocumentByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databasesUpdateDocumentByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabasesApi - functional programming interface
 * @export
 */
export const DatabasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const databasesCreateDocumentRequest: DatabasesCreateDocumentRequest = {
                documentId: requestParameters.documentId,
                data: requestParameters.data,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDocument(requestParameters.databaseId, requestParameters.collectionId, databasesCreateDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {DatabasesApiListUserDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDocuments(requestParameters: DatabasesApiListUserDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDocuments(requestParameters.databaseId, requestParameters.collectionId, requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const databasesUpdateDocumentByIdRequest: DatabasesUpdateDocumentByIdRequest = {
                data: requestParameters.data,
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentById(requestParameters.databaseId, requestParameters.collectionId, requestParameters.documentId, databasesUpdateDocumentByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabasesApi - factory interface
 * @export
 */
export const DatabasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabasesApiFp(configuration)
    return {
        /**
         * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
         * @summary Create document
         * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.createDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a document by its unique ID.
         * @summary Delete document
         * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
         * @summary Get document
         * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.getDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
         * @summary List documents
         * @param {DatabasesApiListUserDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDocuments(requestParameters: DatabasesApiListUserDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentList> {
            return localVarFp.listUserDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
         * @summary Update document
         * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.updateDocumentById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDocument operation in DatabasesApi.
 * @export
 * @interface DatabasesApiCreateDocumentRequest
 */
export type DatabasesApiCreateDocumentRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiCreateDocument
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.
    * @type {string}
    * @memberof DatabasesApiCreateDocument
    */
    readonly collectionId: string
    
} & DatabasesCreateDocumentRequest

/**
 * Request parameters for deleteDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiDeleteDocumentByIdRequest
 */
export type DatabasesApiDeleteDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiDeleteDocumentById
    */
    readonly documentId: string
    
}

/**
 * Request parameters for getDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiGetDocumentByIdRequest
 */
export type DatabasesApiGetDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly documentId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof DatabasesApiGetDocumentById
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for listUserDocuments operation in DatabasesApi.
 * @export
 * @interface DatabasesApiListUserDocumentsRequest
 */
export type DatabasesApiListUserDocumentsRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiListUserDocuments
    */
    readonly databaseId: string
    
    /**
    * Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
    * @type {string}
    * @memberof DatabasesApiListUserDocuments
    */
    readonly collectionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof DatabasesApiListUserDocuments
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for updateDocumentById operation in DatabasesApi.
 * @export
 * @interface DatabasesApiUpdateDocumentByIdRequest
 */
export type DatabasesApiUpdateDocumentByIdRequest = {
    
    /**
    * Database ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly databaseId: string
    
    /**
    * Collection ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly collectionId: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DatabasesApiUpdateDocumentById
    */
    readonly documentId: string
    
} & DatabasesUpdateDocumentByIdRequest

/**
 * DatabasesApiGenerated - object-oriented interface
 * @export
 * @class DatabasesApiGenerated
 * @extends {BaseAPI}
 */
export class DatabasesApiGenerated extends BaseAPI {
    /**
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
     * @summary Create document
     * @param {DatabasesApiCreateDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public createDocument(requestParameters: DatabasesApiCreateDocumentRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).createDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a document by its unique ID.
     * @summary Delete document
     * @param {DatabasesApiDeleteDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public deleteDocumentById(requestParameters: DatabasesApiDeleteDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).deleteDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     * @summary Get document
     * @param {DatabasesApiGetDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public getDocumentById(requestParameters: DatabasesApiGetDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).getDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the user\'s documents in a given collection. You can use the query params to filter your results.
     * @summary List documents
     * @param {DatabasesApiListUserDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public listUserDocuments(requestParameters: DatabasesApiListUserDocumentsRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).listUserDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     * @summary Update document
     * @param {DatabasesApiUpdateDocumentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabasesApiGenerated
     */
    public updateDocumentById(requestParameters: DatabasesApiUpdateDocumentByIdRequest, options?: AxiosRequestConfig) {
        return DatabasesApiFp(this.configuration).updateDocumentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
