/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountCompleteMfaChallengeRequest } from '../models';
// @ts-ignore
import { AccountCompletePasswordRecoveryRequest } from '../models';
// @ts-ignore
import { AccountConfirmPhoneVerificationRequest } from '../models';
// @ts-ignore
import { AccountCreateEmailPasswordSessionRequest } from '../models';
// @ts-ignore
import { AccountCreateEmailTokenRequest } from '../models';
// @ts-ignore
import { AccountCreateEmailVerificationRequest } from '../models';
// @ts-ignore
import { AccountCreateEmailVerificationRequest1 } from '../models';
// @ts-ignore
import { AccountCreateMagicUrlTokenRequest } from '../models';
// @ts-ignore
import { AccountCreateMfaChallengeRequest } from '../models';
// @ts-ignore
import { AccountCreatePasswordRecoveryRequest } from '../models';
// @ts-ignore
import { AccountCreatePhoneTokenRequest } from '../models';
// @ts-ignore
import { AccountCreatePushTargetRequest } from '../models';
// @ts-ignore
import { AccountCreateSessionFromTokenRequest } from '../models';
// @ts-ignore
import { AccountDeleteAuthenticatorRequest } from '../models';
// @ts-ignore
import { AccountRegisterUserRequest } from '../models';
// @ts-ignore
import { AccountUpdateMagicUrlSessionRequest } from '../models';
// @ts-ignore
import { AccountUpdateMfaStatusRequest } from '../models';
// @ts-ignore
import { AccountUpdateNameOperationRequest } from '../models';
// @ts-ignore
import { AccountUpdatePasswordRequest } from '../models';
// @ts-ignore
import { AccountUpdatePhoneRequest } from '../models';
// @ts-ignore
import { AccountUpdatePhoneSessionRequest } from '../models';
// @ts-ignore
import { AccountUpdatePreferencesRequest } from '../models';
// @ts-ignore
import { AccountUpdatePushTargetRequest } from '../models';
// @ts-ignore
import { AccountUpdateUserEmailRequest } from '../models';
// @ts-ignore
import { AccountVerifyAuthenticatorRequest } from '../models';
// @ts-ignore
import { IdentityList } from '../models';
// @ts-ignore
import { Jwt } from '../models';
// @ts-ignore
import { LogList } from '../models';
// @ts-ignore
import { MfaChallenge } from '../models';
// @ts-ignore
import { MfaFactors } from '../models';
// @ts-ignore
import { MfaRecoveryCodes } from '../models';
// @ts-ignore
import { MfaType } from '../models';
// @ts-ignore
import { Session } from '../models';
// @ts-ignore
import { SessionList } from '../models';
// @ts-ignore
import { Target } from '../models';
// @ts-ignore
import { Token } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
         * @summary Add Authenticator
         * @param {'totp'} type Type of authenticator. Must be &#x60;totp&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthenticator: async (type: 'totp', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('addAuthenticator', 'type', type)
            const localVarPath = `/account/mfa/authenticators/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/authenticators/{type}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
         * @summary Update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/status',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Challenge (confirmation)
         * @param {AccountCompleteMfaChallengeRequest} [accountCompleteMfaChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMfaChallenge: async (accountCompleteMfaChallengeRequest?: AccountCompleteMfaChallengeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCompleteMfaChallengeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/challenge',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCompleteMfaChallengeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
         * @summary Create password recovery (confirmation)
         * @param {AccountCompletePasswordRecoveryRequest} [accountCompletePasswordRecoveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePasswordRecovery: async (accountCompletePasswordRecoveryRequest?: AccountCompletePasswordRecoveryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/recovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCompletePasswordRecoveryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/recovery',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCompletePasswordRecoveryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user\'s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create phone verification (confirmation)
         * @param {AccountConfirmPhoneVerificationRequest} [accountConfirmPhoneVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneVerification: async (accountConfirmPhoneVerificationRequest?: AccountConfirmPhoneVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/verification/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountConfirmPhoneVerificationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/verification/phone',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountConfirmPhoneVerificationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
         * @summary Create anonymous session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnonymousSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions/anonymous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/anonymous',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email password session
         * @param {AccountCreateEmailPasswordSessionRequest} [accountCreateEmailPasswordSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailPasswordSession: async (accountCreateEmailPasswordSessionRequest?: AccountCreateEmailPasswordSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateEmailPasswordSessionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateEmailPasswordSessionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email token (OTP)
         * @param {AccountCreateEmailTokenRequest} [accountCreateEmailTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailToken: async (accountCreateEmailTokenRequest?: AccountCreateEmailTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/tokens/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateEmailTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/tokens/email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateEmailTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create email verification (confirmation)
         * @param {AccountCreateEmailVerificationRequest1} [accountCreateEmailVerificationRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailVerification: async (accountCreateEmailVerificationRequest1?: AccountCreateEmailVerificationRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateEmailVerificationRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/verification',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateEmailVerificationRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user\'s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
         * @summary Create email verification
         * @param {AccountCreateEmailVerificationRequest} [accountCreateEmailVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailVerification_1: async (accountCreateEmailVerificationRequest?: AccountCreateEmailVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateEmailVerificationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/verification',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateEmailVerificationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
         * @summary Create JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJwt: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/jwt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/jwt',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user\'s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create magic URL token
         * @param {AccountCreateMagicUrlTokenRequest} [accountCreateMagicUrlTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMagicUrlToken: async (accountCreateMagicUrlTokenRequest?: AccountCreateMagicUrlTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/tokens/magic-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateMagicUrlTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/tokens/magic-url',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateMagicUrlTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
         * @summary Create 2FA Challenge
         * @param {AccountCreateMfaChallengeRequest} [accountCreateMfaChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMfaChallenge: async (accountCreateMfaChallengeRequest?: AccountCreateMfaChallengeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateMfaChallengeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/challenge',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateMfaChallengeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate recovery codes as backup for MFA flow. It\'s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMfaRecoveryCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/recovery-codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/recovery-codes',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create OAuth2 session
         * @param {'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'} provider OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
         * @param {string} [success] URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project\&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
         * @param {string} [failure] URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project\&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
         * @param {Array<string>} [scopes] A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Session: async (provider: 'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock', success?: string, failure?: string, scopes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('createOAuth2Session', 'provider', provider)
            const localVarPath = `/account/sessions/oauth2/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (success !== undefined) {
                localVarQueryParameter['success'] = success;
            }

            if (failure !== undefined) {
                localVarQueryParameter['failure'] = failure;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/oauth2/{provider}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.   If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create OAuth2 token
         * @param {'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'} provider OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
         * @param {string} [success] URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project\&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
         * @param {string} [failure] URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project\&#39;s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
         * @param {Array<string>} [scopes] A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Token: async (provider: 'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock', success?: string, failure?: string, scopes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('createOAuth2Token', 'provider', provider)
            const localVarPath = `/account/tokens/oauth2/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            if (success !== undefined) {
                localVarQueryParameter['success'] = success;
            }

            if (failure !== undefined) {
                localVarQueryParameter['failure'] = failure;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/tokens/oauth2/{provider}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user\'s email address is valid for 1 hour.
         * @summary Create password recovery
         * @param {AccountCreatePasswordRecoveryRequest} [accountCreatePasswordRecoveryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordRecovery: async (accountCreatePasswordRecoveryRequest?: AccountCreatePasswordRecoveryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/recovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreatePasswordRecoveryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/recovery',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreatePasswordRecoveryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create phone token
         * @param {AccountCreatePhoneTokenRequest} [accountCreatePhoneTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneToken: async (accountCreatePhoneTokenRequest?: AccountCreatePhoneTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/tokens/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreatePhoneTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/tokens/phone',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreatePhoneTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user\'s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user\'s phone number is valid for 15 minutes.
         * @summary Create phone verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneVerification: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/verification/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/verification/phone',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create push target
         * @param {AccountCreatePushTargetRequest} [accountCreatePushTargetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPushTarget: async (accountCreatePushTargetRequest?: AccountCreatePushTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/targets/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreatePushTargetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/targets/push',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreatePushTargetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Create session
         * @param {AccountCreateSessionFromTokenRequest} [accountCreateSessionFromTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionFromToken: async (accountCreateSessionFromTokenRequest?: AccountCreateSessionFromTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountCreateSessionFromTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateSessionFromTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an authenticator for a user by ID.
         * @summary Delete Authenticator
         * @param {'totp'} type Type of authenticator.
         * @param {AccountDeleteAuthenticatorRequest} [accountDeleteAuthenticatorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthenticator: async (type: 'totp', accountDeleteAuthenticatorRequest?: AccountDeleteAuthenticatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('deleteAuthenticator', 'type', type)
            const localVarPath = `/account/mfa/authenticators/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountDeleteAuthenticatorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/authenticators/{type}',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountDeleteAuthenticatorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an identity by its unique ID.
         * @summary Delete identity
         * @param {string} identityId Identity ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityById: async (identityId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('deleteIdentityById', 'identityId', identityId)
            const localVarPath = `/account/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId !== undefined ? identityId : `-identityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/identities/{identityId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete push target
         * @param {string} targetId Target ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushTarget: async (targetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('deletePushTarget', 'targetId', targetId)
            const localVarPath = `/account/targets/{targetId}/push`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId !== undefined ? targetId : `-targetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/targets/{targetId}/push',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to extend a session\'s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
         * @summary Update session
         * @param {string} sessionId Session ID. Use the string \&#39;current\&#39; to update the current device session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendSessionLength: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('extendSessionLength', 'sessionId', sessionId)
            const localVarPath = `/account/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-sessionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/{sessionId}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the currently logged in user.
         * @summary Get account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
         * @summary Get MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMfaRecoveryCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/recovery-codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/recovery-codes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the preferences as a key-value object for the currently logged in user.
         * @summary Get account preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrefs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/prefs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/prefs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get a logged in user\'s session using a Session ID. Inputting \'current\' will return the current session being used.
         * @summary Get session
         * @param {string} sessionId Session ID. Use the string \&#39;current\&#39; to get the current device session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSession', 'sessionId', sessionId)
            const localVarPath = `/account/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-sessionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/{sessionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of identities for the currently logged in user.
         * @summary List Identities
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities: async (queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/identities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
         * @summary List logs
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogs: async (queries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/logs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the factors available on the account to be used as a MFA challange.
         * @summary List Factors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMfaFactors: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/factors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/factors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of active sessions across different devices for the currently logged in user.
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout the user. Use \'current\' as the session ID to logout on this device, use a session ID to logout on another device. If you\'re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
         * @summary Delete session
         * @param {string} sessionId Session ID. Use the string \&#39;current\&#39; to delete the current device session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutSessionById: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('logoutSessionById', 'sessionId', sessionId)
            const localVarPath = `/account/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-sessionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/{sessionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
         * @summary Regenerate MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateMfaRecoveryCodes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa/recovery-codes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/recovery-codes',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
         * @summary Create account
         * @param {AccountRegisterUserRequest} [accountRegisterUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (accountRegisterUserRequest?: AccountRegisterUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountRegisterUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountRegisterUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all sessions from the user account and remove any sessions cookies from the end client.
         * @summary Delete sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSessions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update magic URL session
         * @param {AccountUpdateMagicUrlSessionRequest} [accountUpdateMagicUrlSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMagicUrlSession: async (accountUpdateMagicUrlSessionRequest?: AccountUpdateMagicUrlSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions/magic-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdateMagicUrlSessionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/magic-url',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateMagicUrlSessionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable MFA on an account.
         * @summary Update MFA
         * @param {AccountUpdateMfaStatusRequest} [accountUpdateMfaStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMfaStatus: async (accountUpdateMfaStatusRequest?: AccountUpdateMfaStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/mfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdateMfaStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateMfaStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update currently logged in user account name.
         * @summary Update name
         * @param {AccountUpdateNameOperationRequest} [accountUpdateNameOperationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameOperation: async (accountUpdateNameOperationRequest?: AccountUpdateNameOperationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdateNameOperationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/name',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateNameOperationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
         * @summary Update password
         * @param {AccountUpdatePasswordRequest} [accountUpdatePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (accountUpdatePasswordRequest?: AccountUpdatePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdatePasswordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/password',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdatePasswordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the currently logged in user\'s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
         * @summary Update phone
         * @param {AccountUpdatePhoneRequest} [accountUpdatePhoneRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhone: async (accountUpdatePhoneRequest?: AccountUpdatePhoneRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdatePhoneRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/phone',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdatePhoneRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update phone session
         * @param {AccountUpdatePhoneSessionRequest} [accountUpdatePhoneSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneSession: async (accountUpdatePhoneSessionRequest?: AccountUpdatePhoneSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/sessions/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdatePhoneSessionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/sessions/phone',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdatePhoneSessionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
         * @summary Update preferences
         * @param {AccountUpdatePreferencesRequest} [accountUpdatePreferencesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePreferences: async (accountUpdatePreferencesRequest?: AccountUpdatePreferencesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/prefs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdatePreferencesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/prefs',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdatePreferencesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update push target
         * @param {string} targetId Target ID.
         * @param {AccountUpdatePushTargetRequest} [accountUpdatePushTargetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushTarget: async (targetId: string, accountUpdatePushTargetRequest?: AccountUpdatePushTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('updatePushTarget', 'targetId', targetId)
            const localVarPath = `/account/targets/{targetId}/push`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId !== undefined ? targetId : `-targetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdatePushTargetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/targets/{targetId}/push',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdatePushTargetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
         * @summary Update email
         * @param {AccountUpdateUserEmailRequest} [accountUpdateUserEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail: async (accountUpdateUserEmailRequest?: AccountUpdateUserEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountUpdateUserEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/email',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateUserEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
         * @summary Verify Authenticator
         * @param {'totp'} type Type of authenticator.
         * @param {AccountVerifyAuthenticatorRequest} [accountVerifyAuthenticatorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthenticator: async (type: 'totp', accountVerifyAuthenticatorRequest?: AccountVerifyAuthenticatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('verifyAuthenticator', 'type', type)
            const localVarPath = `/account/mfa/authenticators/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type !== undefined ? type : `-type-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accountVerifyAuthenticatorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account/mfa/authenticators/{type}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accountVerifyAuthenticatorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
         * @summary Add Authenticator
         * @param {AccountApiAddAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthenticator(requestParameters: AccountApiAddAuthenticatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthenticator(requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
         * @summary Update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUserStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUserStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Challenge (confirmation)
         * @param {AccountApiCompleteMfaChallengeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeMfaChallenge(requestParameters: AccountApiCompleteMfaChallengeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const accountCompleteMfaChallengeRequest: AccountCompleteMfaChallengeRequest = {
                challengeId: requestParameters.challengeId,
                otp: requestParameters.otp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeMfaChallenge(accountCompleteMfaChallengeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
         * @summary Create password recovery (confirmation)
         * @param {AccountApiCompletePasswordRecoveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completePasswordRecovery(requestParameters: AccountApiCompletePasswordRecoveryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCompletePasswordRecoveryRequest: AccountCompletePasswordRecoveryRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.completePasswordRecovery(accountCompletePasswordRecoveryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user\'s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create phone verification (confirmation)
         * @param {AccountApiConfirmPhoneVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPhoneVerification(requestParameters: AccountApiConfirmPhoneVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountConfirmPhoneVerificationRequest: AccountConfirmPhoneVerificationRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPhoneVerification(accountConfirmPhoneVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
         * @summary Create anonymous session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnonymousSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnonymousSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email password session
         * @param {AccountApiCreateEmailPasswordSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailPasswordSession(requestParameters: AccountApiCreateEmailPasswordSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const accountCreateEmailPasswordSessionRequest: AccountCreateEmailPasswordSessionRequest = {
                email: requestParameters.email,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailPasswordSession(accountCreateEmailPasswordSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email token (OTP)
         * @param {AccountApiCreateEmailTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailToken(requestParameters: AccountApiCreateEmailTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreateEmailTokenRequest: AccountCreateEmailTokenRequest = {
                userId: requestParameters.userId,
                email: requestParameters.email,
                phrase: requestParameters.phrase
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailToken(accountCreateEmailTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create email verification (confirmation)
         * @param {AccountApiCreateEmailVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailVerification(requestParameters: AccountApiCreateEmailVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreateEmailVerificationRequest1: AccountCreateEmailVerificationRequest1 = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailVerification(accountCreateEmailVerificationRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user\'s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
         * @summary Create email verification
         * @param {AccountApiCreateEmailVerification0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailVerification_1(requestParameters: AccountApiCreateEmailVerification0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreateEmailVerificationRequest: AccountCreateEmailVerificationRequest = {
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailVerification_1(accountCreateEmailVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
         * @summary Create JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJwt(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Jwt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJwt(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user\'s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create magic URL token
         * @param {AccountApiCreateMagicUrlTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMagicUrlToken(requestParameters: AccountApiCreateMagicUrlTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreateMagicUrlTokenRequest: AccountCreateMagicUrlTokenRequest = {
                userId: requestParameters.userId,
                email: requestParameters.email,
                url: requestParameters.url,
                phrase: requestParameters.phrase
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMagicUrlToken(accountCreateMagicUrlTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
         * @summary Create 2FA Challenge
         * @param {AccountApiCreateMfaChallengeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMfaChallenge(requestParameters: AccountApiCreateMfaChallengeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaChallenge>> {
            const accountCreateMfaChallengeRequest: AccountCreateMfaChallengeRequest = {
                factor: requestParameters.factor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMfaChallenge(accountCreateMfaChallengeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate recovery codes as backup for MFA flow. It\'s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMfaRecoveryCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaRecoveryCodes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMfaRecoveryCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create OAuth2 session
         * @param {AccountApiCreateOAuth2SessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOAuth2Session(requestParameters: AccountApiCreateOAuth2SessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuth2Session(requestParameters.provider, requestParameters.success, requestParameters.failure, requestParameters.scopes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.   If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create OAuth2 token
         * @param {AccountApiCreateOAuth2TokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOAuth2Token(requestParameters: AccountApiCreateOAuth2TokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuth2Token(requestParameters.provider, requestParameters.success, requestParameters.failure, requestParameters.scopes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user\'s email address is valid for 1 hour.
         * @summary Create password recovery
         * @param {AccountApiCreatePasswordRecoveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPasswordRecovery(requestParameters: AccountApiCreatePasswordRecoveryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreatePasswordRecoveryRequest: AccountCreatePasswordRecoveryRequest = {
                email: requestParameters.email,
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPasswordRecovery(accountCreatePasswordRecoveryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create phone token
         * @param {AccountApiCreatePhoneTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoneToken(requestParameters: AccountApiCreatePhoneTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const accountCreatePhoneTokenRequest: AccountCreatePhoneTokenRequest = {
                userId: requestParameters.userId,
                phone: requestParameters.phone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoneToken(accountCreatePhoneTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user\'s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user\'s phone number is valid for 15 minutes.
         * @summary Create phone verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoneVerification(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoneVerification(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create push target
         * @param {AccountApiCreatePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPushTarget(requestParameters: AccountApiCreatePushTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Target>> {
            const accountCreatePushTargetRequest: AccountCreatePushTargetRequest = {
                targetId: requestParameters.targetId,
                identifier: requestParameters.identifier,
                providerId: requestParameters.providerId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPushTarget(accountCreatePushTargetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Create session
         * @param {AccountApiCreateSessionFromTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSessionFromToken(requestParameters: AccountApiCreateSessionFromTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const accountCreateSessionFromTokenRequest: AccountCreateSessionFromTokenRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSessionFromToken(accountCreateSessionFromTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an authenticator for a user by ID.
         * @summary Delete Authenticator
         * @param {AccountApiDeleteAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthenticator(requestParameters: AccountApiDeleteAuthenticatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountDeleteAuthenticatorRequest: AccountDeleteAuthenticatorRequest = {
                otp: requestParameters.otp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthenticator(requestParameters.type, accountDeleteAuthenticatorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an identity by its unique ID.
         * @summary Delete identity
         * @param {AccountApiDeleteIdentityByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdentityById(requestParameters: AccountApiDeleteIdentityByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdentityById(requestParameters.identityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete push target
         * @param {AccountApiDeletePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePushTarget(requestParameters: AccountApiDeletePushTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Target>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePushTarget(requestParameters.targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to extend a session\'s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
         * @summary Update session
         * @param {AccountApiExtendSessionLengthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extendSessionLength(requestParameters: AccountApiExtendSessionLengthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extendSessionLength(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the currently logged in user.
         * @summary Get account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
         * @summary Get MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMfaRecoveryCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaRecoveryCodes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMfaRecoveryCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the preferences as a key-value object for the currently logged in user.
         * @summary Get account preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrefs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrefs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get a logged in user\'s session using a Session ID. Inputting \'current\' will return the current session being used.
         * @summary Get session
         * @param {AccountApiGetSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(requestParameters: AccountApiGetSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of identities for the currently logged in user.
         * @summary List Identities
         * @param {AccountApiListIdentitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIdentities(requestParameters: AccountApiListIdentitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIdentities(requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
         * @summary List logs
         * @param {AccountApiListLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLogs(requestParameters: AccountApiListLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLogs(requestParameters.queries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the factors available on the account to be used as a MFA challange.
         * @summary List Factors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMfaFactors(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaFactors>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMfaFactors(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of active sessions across different devices for the currently logged in user.
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Logout the user. Use \'current\' as the session ID to logout on this device, use a session ID to logout on another device. If you\'re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
         * @summary Delete session
         * @param {AccountApiLogoutSessionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutSessionById(requestParameters: AccountApiLogoutSessionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutSessionById(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
         * @summary Regenerate MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regenerateMfaRecoveryCodes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaRecoveryCodes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateMfaRecoveryCodes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
         * @summary Create account
         * @param {AccountApiRegisterUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(requestParameters: AccountApiRegisterUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountRegisterUserRequest: AccountRegisterUserRequest = {
                userId: requestParameters.userId,
                email: requestParameters.email,
                password: requestParameters.password,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(accountRegisterUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete all sessions from the user account and remove any sessions cookies from the end client.
         * @summary Delete sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSessions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSessions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update magic URL session
         * @param {AccountApiUpdateMagicUrlSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMagicUrlSession(requestParameters: AccountApiUpdateMagicUrlSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const accountUpdateMagicUrlSessionRequest: AccountUpdateMagicUrlSessionRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMagicUrlSession(accountUpdateMagicUrlSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enable or disable MFA on an account.
         * @summary Update MFA
         * @param {AccountApiUpdateMfaStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMfaStatus(requestParameters: AccountApiUpdateMfaStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdateMfaStatusRequest: AccountUpdateMfaStatusRequest = {
                mfa: requestParameters.mfa
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMfaStatus(accountUpdateMfaStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update currently logged in user account name.
         * @summary Update name
         * @param {AccountApiUpdateNameOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNameOperation(requestParameters: AccountApiUpdateNameOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdateNameOperationRequest: AccountUpdateNameOperationRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNameOperation(accountUpdateNameOperationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
         * @summary Update password
         * @param {AccountApiUpdatePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(requestParameters: AccountApiUpdatePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdatePasswordRequest: AccountUpdatePasswordRequest = {
                password: requestParameters.password,
                oldPassword: requestParameters.oldPassword
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(accountUpdatePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the currently logged in user\'s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
         * @summary Update phone
         * @param {AccountApiUpdatePhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhone(requestParameters: AccountApiUpdatePhoneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdatePhoneRequest: AccountUpdatePhoneRequest = {
                phone: requestParameters.phone,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhone(accountUpdatePhoneRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update phone session
         * @param {AccountApiUpdatePhoneSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoneSession(requestParameters: AccountApiUpdatePhoneSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const accountUpdatePhoneSessionRequest: AccountUpdatePhoneSessionRequest = {
                userId: requestParameters.userId,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoneSession(accountUpdatePhoneSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
         * @summary Update preferences
         * @param {AccountApiUpdatePreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePreferences(requestParameters: AccountApiUpdatePreferencesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdatePreferencesRequest: AccountUpdatePreferencesRequest = {
                prefs: requestParameters.prefs
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePreferences(accountUpdatePreferencesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update push target
         * @param {AccountApiUpdatePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePushTarget(requestParameters: AccountApiUpdatePushTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Target>> {
            const accountUpdatePushTargetRequest: AccountUpdatePushTargetRequest = {
                identifier: requestParameters.identifier
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePushTarget(requestParameters.targetId, accountUpdatePushTargetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
         * @summary Update email
         * @param {AccountApiUpdateUserEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserEmail(requestParameters: AccountApiUpdateUserEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountUpdateUserEmailRequest: AccountUpdateUserEmailRequest = {
                email: requestParameters.email,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserEmail(accountUpdateUserEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
         * @summary Verify Authenticator
         * @param {AccountApiVerifyAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthenticator(requestParameters: AccountApiVerifyAuthenticatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const accountVerifyAuthenticatorRequest: AccountVerifyAuthenticatorRequest = {
                otp: requestParameters.otp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthenticator(requestParameters.type, accountVerifyAuthenticatorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
         * @summary Add Authenticator
         * @param {AccountApiAddAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthenticator(requestParameters: AccountApiAddAuthenticatorRequest, options?: AxiosRequestConfig): AxiosPromise<MfaType> {
            return localVarFp.addAuthenticator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
         * @summary Update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserStatus(options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.blockUserStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Challenge (confirmation)
         * @param {AccountApiCompleteMfaChallengeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMfaChallenge(requestParameters: AccountApiCompleteMfaChallengeRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.completeMfaChallenge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
         * @summary Create password recovery (confirmation)
         * @param {AccountApiCompletePasswordRecoveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePasswordRecovery(requestParameters: AccountApiCompletePasswordRecoveryRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.completePasswordRecovery(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user\'s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create phone verification (confirmation)
         * @param {AccountApiConfirmPhoneVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneVerification(requestParameters: AccountApiConfirmPhoneVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.confirmPhoneVerification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
         * @summary Create anonymous session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnonymousSession(options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.createAnonymousSession(options).then((request) => request(axios, basePath));
        },
        /**
         * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email password session
         * @param {AccountApiCreateEmailPasswordSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailPasswordSession(requestParameters: AccountApiCreateEmailPasswordSessionRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.createEmailPasswordSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create email token (OTP)
         * @param {AccountApiCreateEmailTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailToken(requestParameters: AccountApiCreateEmailTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createEmailToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
         * @summary Create email verification (confirmation)
         * @param {AccountApiCreateEmailVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailVerification(requestParameters: AccountApiCreateEmailVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createEmailVerification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user\'s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
         * @summary Create email verification
         * @param {AccountApiCreateEmailVerification0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailVerification_1(requestParameters: AccountApiCreateEmailVerification0Request, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createEmailVerification_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
         * @summary Create JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJwt(options?: AxiosRequestConfig): AxiosPromise<Jwt> {
            return localVarFp.createJwt(options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user\'s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create magic URL token
         * @param {AccountApiCreateMagicUrlTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMagicUrlToken(requestParameters: AccountApiCreateMagicUrlTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createMagicUrlToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
         * @summary Create 2FA Challenge
         * @param {AccountApiCreateMfaChallengeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMfaChallenge(requestParameters: AccountApiCreateMfaChallengeRequest, options?: AxiosRequestConfig): AxiosPromise<MfaChallenge> {
            return localVarFp.createMfaChallenge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate recovery codes as backup for MFA flow. It\'s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
         * @summary Create MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMfaRecoveryCodes(options?: AxiosRequestConfig): AxiosPromise<MfaRecoveryCodes> {
            return localVarFp.createMfaRecoveryCodes(options).then((request) => request(axios, basePath));
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
         * @summary Create OAuth2 session
         * @param {AccountApiCreateOAuth2SessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Session(requestParameters: AccountApiCreateOAuth2SessionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOAuth2Session(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.   If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create OAuth2 token
         * @param {AccountApiCreateOAuth2TokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Token(requestParameters: AccountApiCreateOAuth2TokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOAuth2Token(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user\'s email address is valid for 1 hour.
         * @summary Create password recovery
         * @param {AccountApiCreatePasswordRecoveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordRecovery(requestParameters: AccountApiCreatePasswordRecoveryRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createPasswordRecovery(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
         * @summary Create phone token
         * @param {AccountApiCreatePhoneTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneToken(requestParameters: AccountApiCreatePhoneTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createPhoneToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user\'s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user\'s phone number is valid for 15 minutes.
         * @summary Create phone verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneVerification(options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createPhoneVerification(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create push target
         * @param {AccountApiCreatePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPushTarget(requestParameters: AccountApiCreatePushTargetRequest, options?: AxiosRequestConfig): AxiosPromise<Target> {
            return localVarFp.createPushTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Create session
         * @param {AccountApiCreateSessionFromTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSessionFromToken(requestParameters: AccountApiCreateSessionFromTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.createSessionFromToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an authenticator for a user by ID.
         * @summary Delete Authenticator
         * @param {AccountApiDeleteAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthenticator(requestParameters: AccountApiDeleteAuthenticatorRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.deleteAuthenticator(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an identity by its unique ID.
         * @summary Delete identity
         * @param {AccountApiDeleteIdentityByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityById(requestParameters: AccountApiDeleteIdentityByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteIdentityById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete push target
         * @param {AccountApiDeletePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushTarget(requestParameters: AccountApiDeletePushTargetRequest, options?: AxiosRequestConfig): AxiosPromise<Target> {
            return localVarFp.deletePushTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to extend a session\'s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
         * @summary Update session
         * @param {AccountApiExtendSessionLengthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendSessionLength(requestParameters: AccountApiExtendSessionLengthRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.extendSessionLength(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the currently logged in user.
         * @summary Get account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
         * @summary Get MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMfaRecoveryCodes(options?: AxiosRequestConfig): AxiosPromise<MfaRecoveryCodes> {
            return localVarFp.getMfaRecoveryCodes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the preferences as a key-value object for the currently logged in user.
         * @summary Get account preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrefs(options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getPrefs(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get a logged in user\'s session using a Session ID. Inputting \'current\' will return the current session being used.
         * @summary Get session
         * @param {AccountApiGetSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(requestParameters: AccountApiGetSessionRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.getSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of identities for the currently logged in user.
         * @summary List Identities
         * @param {AccountApiListIdentitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities(requestParameters: AccountApiListIdentitiesRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityList> {
            return localVarFp.listIdentities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
         * @summary List logs
         * @param {AccountApiListLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogs(requestParameters: AccountApiListLogsRequest, options?: AxiosRequestConfig): AxiosPromise<LogList> {
            return localVarFp.listLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the factors available on the account to be used as a MFA challange.
         * @summary List Factors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMfaFactors(options?: AxiosRequestConfig): AxiosPromise<MfaFactors> {
            return localVarFp.listMfaFactors(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of active sessions across different devices for the currently logged in user.
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions(options?: AxiosRequestConfig): AxiosPromise<SessionList> {
            return localVarFp.listSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * Logout the user. Use \'current\' as the session ID to logout on this device, use a session ID to logout on another device. If you\'re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
         * @summary Delete session
         * @param {AccountApiLogoutSessionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutSessionById(requestParameters: AccountApiLogoutSessionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutSessionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
         * @summary Regenerate MFA Recovery Codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateMfaRecoveryCodes(options?: AxiosRequestConfig): AxiosPromise<MfaRecoveryCodes> {
            return localVarFp.regenerateMfaRecoveryCodes(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
         * @summary Create account
         * @param {AccountApiRegisterUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(requestParameters: AccountApiRegisterUserRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.registerUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all sessions from the user account and remove any sessions cookies from the end client.
         * @summary Delete sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSessions(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update magic URL session
         * @param {AccountApiUpdateMagicUrlSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMagicUrlSession(requestParameters: AccountApiUpdateMagicUrlSessionRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.updateMagicUrlSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable MFA on an account.
         * @summary Update MFA
         * @param {AccountApiUpdateMfaStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMfaStatus(requestParameters: AccountApiUpdateMfaStatusRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateMfaStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update currently logged in user account name.
         * @summary Update name
         * @param {AccountApiUpdateNameOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNameOperation(requestParameters: AccountApiUpdateNameOperationRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateNameOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
         * @summary Update password
         * @param {AccountApiUpdatePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(requestParameters: AccountApiUpdatePasswordRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updatePassword(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the currently logged in user\'s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
         * @summary Update phone
         * @param {AccountApiUpdatePhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhone(requestParameters: AccountApiUpdatePhoneRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updatePhone(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
         * @summary Update phone session
         * @param {AccountApiUpdatePhoneSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneSession(requestParameters: AccountApiUpdatePhoneSessionRequest, options?: AxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.updatePhoneSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
         * @summary Update preferences
         * @param {AccountApiUpdatePreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePreferences(requestParameters: AccountApiUpdatePreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updatePreferences(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update push target
         * @param {AccountApiUpdatePushTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePushTarget(requestParameters: AccountApiUpdatePushTargetRequest, options?: AxiosRequestConfig): AxiosPromise<Target> {
            return localVarFp.updatePushTarget(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
         * @summary Update email
         * @param {AccountApiUpdateUserEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail(requestParameters: AccountApiUpdateUserEmailRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateUserEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
         * @summary Verify Authenticator
         * @param {AccountApiVerifyAuthenticatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthenticator(requestParameters: AccountApiVerifyAuthenticatorRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.verifyAuthenticator(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAuthenticator operation in AccountApi.
 * @export
 * @interface AccountApiAddAuthenticatorRequest
 */
export type AccountApiAddAuthenticatorRequest = {
    
    /**
    * Type of authenticator. Must be `totp`
    * @type {'totp'}
    * @memberof AccountApiAddAuthenticator
    */
    readonly type: 'totp'
    
}

/**
 * Request parameters for completeMfaChallenge operation in AccountApi.
 * @export
 * @interface AccountApiCompleteMfaChallengeRequest
 */
export type AccountApiCompleteMfaChallengeRequest = {
    
} & AccountCompleteMfaChallengeRequest

/**
 * Request parameters for completePasswordRecovery operation in AccountApi.
 * @export
 * @interface AccountApiCompletePasswordRecoveryRequest
 */
export type AccountApiCompletePasswordRecoveryRequest = {
    
} & AccountCompletePasswordRecoveryRequest

/**
 * Request parameters for confirmPhoneVerification operation in AccountApi.
 * @export
 * @interface AccountApiConfirmPhoneVerificationRequest
 */
export type AccountApiConfirmPhoneVerificationRequest = {
    
} & AccountConfirmPhoneVerificationRequest

/**
 * Request parameters for createEmailPasswordSession operation in AccountApi.
 * @export
 * @interface AccountApiCreateEmailPasswordSessionRequest
 */
export type AccountApiCreateEmailPasswordSessionRequest = {
    
} & AccountCreateEmailPasswordSessionRequest

/**
 * Request parameters for createEmailToken operation in AccountApi.
 * @export
 * @interface AccountApiCreateEmailTokenRequest
 */
export type AccountApiCreateEmailTokenRequest = {
    
} & AccountCreateEmailTokenRequest

/**
 * Request parameters for createEmailVerification operation in AccountApi.
 * @export
 * @interface AccountApiCreateEmailVerificationRequest
 */
export type AccountApiCreateEmailVerificationRequest = {
    
} & AccountCreateEmailVerificationRequest1

/**
 * Request parameters for createEmailVerification_1 operation in AccountApi.
 * @export
 * @interface AccountApiCreateEmailVerification0Request
 */
export type AccountApiCreateEmailVerification0Request = {
    
} & AccountCreateEmailVerificationRequest

/**
 * Request parameters for createMagicUrlToken operation in AccountApi.
 * @export
 * @interface AccountApiCreateMagicUrlTokenRequest
 */
export type AccountApiCreateMagicUrlTokenRequest = {
    
} & AccountCreateMagicUrlTokenRequest

/**
 * Request parameters for createMfaChallenge operation in AccountApi.
 * @export
 * @interface AccountApiCreateMfaChallengeRequest
 */
export type AccountApiCreateMfaChallengeRequest = {
    
} & AccountCreateMfaChallengeRequest

/**
 * Request parameters for createOAuth2Session operation in AccountApi.
 * @export
 * @interface AccountApiCreateOAuth2SessionRequest
 */
export type AccountApiCreateOAuth2SessionRequest = {
    
    /**
    * OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
    * @type {'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'}
    * @memberof AccountApiCreateOAuth2Session
    */
    readonly provider: 'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'
    
    /**
    * URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
    * @type {string}
    * @memberof AccountApiCreateOAuth2Session
    */
    readonly success?: string
    
    /**
    * URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
    * @type {string}
    * @memberof AccountApiCreateOAuth2Session
    */
    readonly failure?: string
    
    /**
    * A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof AccountApiCreateOAuth2Session
    */
    readonly scopes?: Array<string>
    
}

/**
 * Request parameters for createOAuth2Token operation in AccountApi.
 * @export
 * @interface AccountApiCreateOAuth2TokenRequest
 */
export type AccountApiCreateOAuth2TokenRequest = {
    
    /**
    * OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
    * @type {'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'}
    * @memberof AccountApiCreateOAuth2Token
    */
    readonly provider: 'amazon' | 'apple' | 'auth0' | 'authentik' | 'autodesk' | 'bitbucket' | 'bitly' | 'box' | 'dailymotion' | 'discord' | 'disqus' | 'dropbox' | 'etsy' | 'facebook' | 'github' | 'gitlab' | 'google' | 'linkedin' | 'microsoft' | 'notion' | 'oidc' | 'okta' | 'paypal' | 'paypalSandbox' | 'podio' | 'salesforce' | 'slack' | 'spotify' | 'stripe' | 'tradeshift' | 'tradeshiftBox' | 'twitch' | 'wordpress' | 'yahoo' | 'yammer' | 'yandex' | 'zoho' | 'zoom' | 'mock'
    
    /**
    * URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
    * @type {string}
    * @memberof AccountApiCreateOAuth2Token
    */
    readonly success?: string
    
    /**
    * URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project\'s platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.
    * @type {string}
    * @memberof AccountApiCreateOAuth2Token
    */
    readonly failure?: string
    
    /**
    * A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.
    * @type {Array<string>}
    * @memberof AccountApiCreateOAuth2Token
    */
    readonly scopes?: Array<string>
    
}

/**
 * Request parameters for createPasswordRecovery operation in AccountApi.
 * @export
 * @interface AccountApiCreatePasswordRecoveryRequest
 */
export type AccountApiCreatePasswordRecoveryRequest = {
    
} & AccountCreatePasswordRecoveryRequest

/**
 * Request parameters for createPhoneToken operation in AccountApi.
 * @export
 * @interface AccountApiCreatePhoneTokenRequest
 */
export type AccountApiCreatePhoneTokenRequest = {
    
} & AccountCreatePhoneTokenRequest

/**
 * Request parameters for createPushTarget operation in AccountApi.
 * @export
 * @interface AccountApiCreatePushTargetRequest
 */
export type AccountApiCreatePushTargetRequest = {
    
} & AccountCreatePushTargetRequest

/**
 * Request parameters for createSessionFromToken operation in AccountApi.
 * @export
 * @interface AccountApiCreateSessionFromTokenRequest
 */
export type AccountApiCreateSessionFromTokenRequest = {
    
} & AccountCreateSessionFromTokenRequest

/**
 * Request parameters for deleteAuthenticator operation in AccountApi.
 * @export
 * @interface AccountApiDeleteAuthenticatorRequest
 */
export type AccountApiDeleteAuthenticatorRequest = {
    
    /**
    * Type of authenticator.
    * @type {'totp'}
    * @memberof AccountApiDeleteAuthenticator
    */
    readonly type: 'totp'
    
} & AccountDeleteAuthenticatorRequest

/**
 * Request parameters for deleteIdentityById operation in AccountApi.
 * @export
 * @interface AccountApiDeleteIdentityByIdRequest
 */
export type AccountApiDeleteIdentityByIdRequest = {
    
    /**
    * Identity ID.
    * @type {string}
    * @memberof AccountApiDeleteIdentityById
    */
    readonly identityId: string
    
}

/**
 * Request parameters for deletePushTarget operation in AccountApi.
 * @export
 * @interface AccountApiDeletePushTargetRequest
 */
export type AccountApiDeletePushTargetRequest = {
    
    /**
    * Target ID.
    * @type {string}
    * @memberof AccountApiDeletePushTarget
    */
    readonly targetId: string
    
}

/**
 * Request parameters for extendSessionLength operation in AccountApi.
 * @export
 * @interface AccountApiExtendSessionLengthRequest
 */
export type AccountApiExtendSessionLengthRequest = {
    
    /**
    * Session ID. Use the string \'current\' to update the current device session.
    * @type {string}
    * @memberof AccountApiExtendSessionLength
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for getSession operation in AccountApi.
 * @export
 * @interface AccountApiGetSessionRequest
 */
export type AccountApiGetSessionRequest = {
    
    /**
    * Session ID. Use the string \'current\' to get the current device session.
    * @type {string}
    * @memberof AccountApiGetSession
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for listIdentities operation in AccountApi.
 * @export
 * @interface AccountApiListIdentitiesRequest
 */
export type AccountApiListIdentitiesRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry
    * @type {Array<string>}
    * @memberof AccountApiListIdentities
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for listLogs operation in AccountApi.
 * @export
 * @interface AccountApiListLogsRequest
 */
export type AccountApiListLogsRequest = {
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset
    * @type {Array<string>}
    * @memberof AccountApiListLogs
    */
    readonly queries?: Array<string>
    
}

/**
 * Request parameters for logoutSessionById operation in AccountApi.
 * @export
 * @interface AccountApiLogoutSessionByIdRequest
 */
export type AccountApiLogoutSessionByIdRequest = {
    
    /**
    * Session ID. Use the string \'current\' to delete the current device session.
    * @type {string}
    * @memberof AccountApiLogoutSessionById
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for registerUser operation in AccountApi.
 * @export
 * @interface AccountApiRegisterUserRequest
 */
export type AccountApiRegisterUserRequest = {
    
} & AccountRegisterUserRequest

/**
 * Request parameters for updateMagicUrlSession operation in AccountApi.
 * @export
 * @interface AccountApiUpdateMagicUrlSessionRequest
 */
export type AccountApiUpdateMagicUrlSessionRequest = {
    
} & AccountUpdateMagicUrlSessionRequest

/**
 * Request parameters for updateMfaStatus operation in AccountApi.
 * @export
 * @interface AccountApiUpdateMfaStatusRequest
 */
export type AccountApiUpdateMfaStatusRequest = {
    
} & AccountUpdateMfaStatusRequest

/**
 * Request parameters for updateNameOperation operation in AccountApi.
 * @export
 * @interface AccountApiUpdateNameOperationRequest
 */
export type AccountApiUpdateNameOperationRequest = {
    
} & AccountUpdateNameOperationRequest

/**
 * Request parameters for updatePassword operation in AccountApi.
 * @export
 * @interface AccountApiUpdatePasswordRequest
 */
export type AccountApiUpdatePasswordRequest = {
    
} & AccountUpdatePasswordRequest

/**
 * Request parameters for updatePhone operation in AccountApi.
 * @export
 * @interface AccountApiUpdatePhoneRequest
 */
export type AccountApiUpdatePhoneRequest = {
    
} & AccountUpdatePhoneRequest

/**
 * Request parameters for updatePhoneSession operation in AccountApi.
 * @export
 * @interface AccountApiUpdatePhoneSessionRequest
 */
export type AccountApiUpdatePhoneSessionRequest = {
    
} & AccountUpdatePhoneSessionRequest

/**
 * Request parameters for updatePreferences operation in AccountApi.
 * @export
 * @interface AccountApiUpdatePreferencesRequest
 */
export type AccountApiUpdatePreferencesRequest = {
    
} & AccountUpdatePreferencesRequest

/**
 * Request parameters for updatePushTarget operation in AccountApi.
 * @export
 * @interface AccountApiUpdatePushTargetRequest
 */
export type AccountApiUpdatePushTargetRequest = {
    
    /**
    * Target ID.
    * @type {string}
    * @memberof AccountApiUpdatePushTarget
    */
    readonly targetId: string
    
} & AccountUpdatePushTargetRequest

/**
 * Request parameters for updateUserEmail operation in AccountApi.
 * @export
 * @interface AccountApiUpdateUserEmailRequest
 */
export type AccountApiUpdateUserEmailRequest = {
    
} & AccountUpdateUserEmailRequest

/**
 * Request parameters for verifyAuthenticator operation in AccountApi.
 * @export
 * @interface AccountApiVerifyAuthenticatorRequest
 */
export type AccountApiVerifyAuthenticatorRequest = {
    
    /**
    * Type of authenticator.
    * @type {'totp'}
    * @memberof AccountApiVerifyAuthenticator
    */
    readonly type: 'totp'
    
} & AccountVerifyAuthenticatorRequest

/**
 * AccountApiGenerated - object-oriented interface
 * @export
 * @class AccountApiGenerated
 * @extends {BaseAPI}
 */
export class AccountApiGenerated extends BaseAPI {
    /**
     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator) method.
     * @summary Add Authenticator
     * @param {AccountApiAddAuthenticatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public addAuthenticator(requestParameters: AccountApiAddAuthenticatorRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).addAuthenticator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.
     * @summary Update status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public blockUserStatus(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).blockUserStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     * @summary Create MFA Challenge (confirmation)
     * @param {AccountApiCompleteMfaChallengeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public completeMfaChallenge(requestParameters: AccountApiCompleteMfaChallengeRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).completeMfaChallenge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
     * @summary Create password recovery (confirmation)
     * @param {AccountApiCompletePasswordRecoveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public completePasswordRecovery(requestParameters: AccountApiCompletePasswordRecoveryRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).completePasswordRecovery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user\'s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.
     * @summary Create phone verification (confirmation)
     * @param {AccountApiConfirmPhoneVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public confirmPhoneVerification(requestParameters: AccountApiConfirmPhoneVerificationRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).confirmPhoneVerification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
     * @summary Create anonymous session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createAnonymousSession(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createAnonymousSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @summary Create email password session
     * @param {AccountApiCreateEmailPasswordSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createEmailPasswordSession(requestParameters: AccountApiCreateEmailPasswordSessionRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createEmailPasswordSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s email is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @summary Create email token (OTP)
     * @param {AccountApiCreateEmailTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createEmailToken(requestParameters: AccountApiCreateEmailTokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createEmailToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
     * @summary Create email verification (confirmation)
     * @param {AccountApiCreateEmailVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createEmailVerification(requestParameters: AccountApiCreateEmailVerificationRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createEmailVerification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user\'s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
     * @summary Create email verification
     * @param {AccountApiCreateEmailVerification0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createEmailVerification_1(requestParameters: AccountApiCreateEmailVerification0Request, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createEmailVerification_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
     * @summary Create JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createJwt(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createJwt(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user\'s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     * @summary Create magic URL token
     * @param {AccountApiCreateMagicUrlTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createMagicUrlToken(requestParameters: AccountApiCreateMagicUrlTokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createMagicUrlToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.
     * @summary Create 2FA Challenge
     * @param {AccountApiCreateMfaChallengeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createMfaChallenge(requestParameters: AccountApiCreateMfaChallengeRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createMfaChallenge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate recovery codes as backup for MFA flow. It\'s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.
     * @summary Create MFA Recovery Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createMfaRecoveryCodes(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createMfaRecoveryCodes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits). 
     * @summary Create OAuth2 session
     * @param {AccountApiCreateOAuth2SessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createOAuth2Session(requestParameters: AccountApiCreateOAuth2SessionRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createOAuth2Session(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL\'s back to your app when login is completed.   If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @summary Create OAuth2 token
     * @param {AccountApiCreateOAuth2TokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createOAuth2Token(requestParameters: AccountApiCreateOAuth2TokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createOAuth2Token(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user\'s email address is valid for 1 hour.
     * @summary Create password recovery
     * @param {AccountApiCreatePasswordRecoveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createPasswordRecovery(requestParameters: AccountApiCreatePasswordRecoveryRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createPasswordRecovery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user\'s phone is valid for 15 minutes.  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).
     * @summary Create phone token
     * @param {AccountApiCreatePhoneTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createPhoneToken(requestParameters: AccountApiCreatePhoneTokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createPhoneToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user\'s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user\'s phone number is valid for 15 minutes.
     * @summary Create phone verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createPhoneVerification(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createPhoneVerification(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create push target
     * @param {AccountApiCreatePushTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createPushTarget(requestParameters: AccountApiCreatePushTargetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createPushTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @summary Create session
     * @param {AccountApiCreateSessionFromTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public createSessionFromToken(requestParameters: AccountApiCreateSessionFromTokenRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).createSessionFromToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an authenticator for a user by ID.
     * @summary Delete Authenticator
     * @param {AccountApiDeleteAuthenticatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public deleteAuthenticator(requestParameters: AccountApiDeleteAuthenticatorRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).deleteAuthenticator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an identity by its unique ID.
     * @summary Delete identity
     * @param {AccountApiDeleteIdentityByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public deleteIdentityById(requestParameters: AccountApiDeleteIdentityByIdRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).deleteIdentityById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete push target
     * @param {AccountApiDeletePushTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public deletePushTarget(requestParameters: AccountApiDeletePushTargetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).deletePushTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to extend a session\'s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.
     * @summary Update session
     * @param {AccountApiExtendSessionLengthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public extendSessionLength(requestParameters: AccountApiExtendSessionLengthRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).extendSessionLength(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the currently logged in user.
     * @summary Get account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.
     * @summary Get MFA Recovery Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getMfaRecoveryCodes(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getMfaRecoveryCodes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the preferences as a key-value object for the currently logged in user.
     * @summary Get account preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getPrefs(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getPrefs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to get a logged in user\'s session using a Session ID. Inputting \'current\' will return the current session being used.
     * @summary Get session
     * @param {AccountApiGetSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public getSession(requestParameters: AccountApiGetSessionRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of identities for the currently logged in user.
     * @summary List Identities
     * @param {AccountApiListIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listIdentities(requestParameters: AccountApiListIdentitiesRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listIdentities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.
     * @summary List logs
     * @param {AccountApiListLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listLogs(requestParameters: AccountApiListLogsRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the factors available on the account to be used as a MFA challange.
     * @summary List Factors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listMfaFactors(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listMfaFactors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of active sessions across different devices for the currently logged in user.
     * @summary List sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public listSessions(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).listSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout the user. Use \'current\' as the session ID to logout on this device, use a session ID to logout on another device. If you\'re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.
     * @summary Delete session
     * @param {AccountApiLogoutSessionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public logoutSessionById(requestParameters: AccountApiLogoutSessionByIdRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).logoutSessionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.
     * @summary Regenerate MFA Recovery Codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public regenerateMfaRecoveryCodes(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).regenerateMfaRecoveryCodes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
     * @summary Create account
     * @param {AccountApiRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public registerUser(requestParameters: AccountApiRegisterUserRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).registerUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all sessions from the user account and remove any sessions cookies from the end client.
     * @summary Delete sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public removeSessions(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).removeSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @summary Update magic URL session
     * @param {AccountApiUpdateMagicUrlSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateMagicUrlSession(requestParameters: AccountApiUpdateMagicUrlSessionRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateMagicUrlSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable or disable MFA on an account.
     * @summary Update MFA
     * @param {AccountApiUpdateMfaStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateMfaStatus(requestParameters: AccountApiUpdateMfaStatusRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateMfaStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update currently logged in user account name.
     * @summary Update name
     * @param {AccountApiUpdateNameOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateNameOperation(requestParameters: AccountApiUpdateNameOperationRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateNameOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.
     * @summary Update password
     * @param {AccountApiUpdatePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updatePassword(requestParameters: AccountApiUpdatePasswordRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updatePassword(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the currently logged in user\'s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.
     * @summary Update phone
     * @param {AccountApiUpdatePhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updatePhone(requestParameters: AccountApiUpdatePhoneRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updatePhone(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.
     * @summary Update phone session
     * @param {AccountApiUpdatePhoneSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updatePhoneSession(requestParameters: AccountApiUpdatePhoneSessionRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updatePhoneSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
     * @summary Update preferences
     * @param {AccountApiUpdatePreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updatePreferences(requestParameters: AccountApiUpdatePreferencesRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updatePreferences(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update push target
     * @param {AccountApiUpdatePushTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updatePushTarget(requestParameters: AccountApiUpdatePushTargetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updatePushTarget(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. 
     * @summary Update email
     * @param {AccountApiUpdateUserEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public updateUserEmail(requestParameters: AccountApiUpdateUserEmailRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).updateUserEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#addAuthenticator) method.
     * @summary Verify Authenticator
     * @param {AccountApiVerifyAuthenticatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiGenerated
     */
    public verifyAuthenticator(requestParameters: AccountApiVerifyAuthenticatorRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).verifyAuthenticator(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
