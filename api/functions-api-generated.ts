/* tslint:disable */
/* eslint-disable */
/*
Appwrite

Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

The version of the OpenAPI document: 1.5.0
Contact: team@appwrite.io

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Execution } from '../models';
// @ts-ignore
import { ExecutionList } from '../models';
// @ts-ignore
import { FunctionsTriggerFunctionExecutionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FunctionsApi - axios parameter creator
 * @export
 */
export const FunctionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {string} functionId Function ID.
         * @param {string} executionId Execution ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog: async (functionId: string, executionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('getExecutionLog', 'functionId', functionId)
            // verify required parameter 'executionId' is not null or undefined
            assertParamExists('getExecutionLog', 'executionId', executionId)
            const localVarPath = `/functions/{functionId}/executions/{executionId}`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId !== undefined ? executionId : `-executionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions/{executionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {string} functionId Function ID.
         * @param {Array<string>} [queries] Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration
         * @param {string} [search] Search term to filter your list results. Max length: 256 chars.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions: async (functionId: string, queries?: Array<string>, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('listExecutions', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/executions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })
            if (queries) {
                localVarQueryParameter['queries'] = queries;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {string} functionId Function ID.
         * @param {FunctionsTriggerFunctionExecutionRequest} [functionsTriggerFunctionExecutionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerFunctionExecution: async (functionId: string, functionsTriggerFunctionExecutionRequest?: FunctionsTriggerFunctionExecutionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'functionId' is not null or undefined
            assertParamExists('triggerFunctionExecution', 'functionId', functionId)
            const localVarPath = `/functions/{functionId}/executions`
                .replace(`{${"functionId"}}`, encodeURIComponent(String(functionId !== undefined ? functionId : `-functionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-JWT", keyParamName: "jWT", configuration })
            // authentication Project required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Project", keyParamName: "project", configuration })
            // authentication Session required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Appwrite-Session", keyParamName: "session", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: functionsTriggerFunctionExecutionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/functions/{functionId}/executions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(functionsTriggerFunctionExecutionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FunctionsApi - functional programming interface
 * @export
 */
export const FunctionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FunctionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionLog(requestParameters.functionId, requestParameters.executionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExecutions(requestParameters.functionId, requestParameters.queries, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {FunctionsApiTriggerFunctionExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerFunctionExecution(requestParameters: FunctionsApiTriggerFunctionExecutionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execution>> {
            const functionsTriggerFunctionExecutionRequest: FunctionsTriggerFunctionExecutionRequest = {
                body: requestParameters.body,
                async: requestParameters.async,
                path: requestParameters.path,
                method: requestParameters.method,
                headers: requestParameters.headers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerFunctionExecution(requestParameters.functionId, functionsTriggerFunctionExecutionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FunctionsApi - factory interface
 * @export
 */
export const FunctionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FunctionsApiFp(configuration)
    return {
        /**
         * Get a function execution log by its unique ID.
         * @summary Get execution
         * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig): AxiosPromise<Execution> {
            return localVarFp.getExecutionLog(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all the current user function execution logs. You can use the query params to filter your results.
         * @summary List executions
         * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig): AxiosPromise<ExecutionList> {
            return localVarFp.listExecutions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
         * @summary Create execution
         * @param {FunctionsApiTriggerFunctionExecutionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerFunctionExecution(requestParameters: FunctionsApiTriggerFunctionExecutionRequest, options?: AxiosRequestConfig): AxiosPromise<Execution> {
            return localVarFp.triggerFunctionExecution(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getExecutionLog operation in FunctionsApi.
 * @export
 * @interface FunctionsApiGetExecutionLogRequest
 */
export type FunctionsApiGetExecutionLogRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiGetExecutionLog
    */
    readonly functionId: string
    
    /**
    * Execution ID.
    * @type {string}
    * @memberof FunctionsApiGetExecutionLog
    */
    readonly executionId: string
    
}

/**
 * Request parameters for listExecutions operation in FunctionsApi.
 * @export
 * @interface FunctionsApiListExecutionsRequest
 */
export type FunctionsApiListExecutionsRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiListExecutions
    */
    readonly functionId: string
    
    /**
    * Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration
    * @type {Array<string>}
    * @memberof FunctionsApiListExecutions
    */
    readonly queries?: Array<string>
    
    /**
    * Search term to filter your list results. Max length: 256 chars.
    * @type {string}
    * @memberof FunctionsApiListExecutions
    */
    readonly search?: string
    
}

/**
 * Request parameters for triggerFunctionExecution operation in FunctionsApi.
 * @export
 * @interface FunctionsApiTriggerFunctionExecutionRequest
 */
export type FunctionsApiTriggerFunctionExecutionRequest = {
    
    /**
    * Function ID.
    * @type {string}
    * @memberof FunctionsApiTriggerFunctionExecution
    */
    readonly functionId: string
    
} & FunctionsTriggerFunctionExecutionRequest

/**
 * FunctionsApiGenerated - object-oriented interface
 * @export
 * @class FunctionsApiGenerated
 * @extends {BaseAPI}
 */
export class FunctionsApiGenerated extends BaseAPI {
    /**
     * Get a function execution log by its unique ID.
     * @summary Get execution
     * @param {FunctionsApiGetExecutionLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public getExecutionLog(requestParameters: FunctionsApiGetExecutionLogRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).getExecutionLog(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all the current user function execution logs. You can use the query params to filter your results.
     * @summary List executions
     * @param {FunctionsApiListExecutionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public listExecutions(requestParameters: FunctionsApiListExecutionsRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).listExecutions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @summary Create execution
     * @param {FunctionsApiTriggerFunctionExecutionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FunctionsApiGenerated
     */
    public triggerFunctionExecution(requestParameters: FunctionsApiTriggerFunctionExecutionRequest, options?: AxiosRequestConfig) {
        return FunctionsApiFp(this.configuration).triggerFunctionExecution(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
